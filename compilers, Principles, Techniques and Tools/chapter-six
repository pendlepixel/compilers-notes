中间代码生成

  在编译器的分析-综合模型中，前端对源程序进行分析并产生中间表示形式，后端在此基础上生成目标代码。理想情况下，和源语言相关的细节在前段分析中处理，而关于
目标机器的细节则在后端处理。基于一个适当定义的中间表示，可以把针对源语言i的前端和针对目标机器j的后端组合起来，构造得到源语言i在目标机器j上的一个编译器。
这种创建编译器组合的方法可以大大减少工作量：只要写出m中前端和n中后端处理程序，就可以得到m*n种编译程序。

  将给定源语言的一个程序翻译成特定的目标机器代码的过程中，一个编译器可能构造出一系列中间表示，如下图。高层的表示接近于源语言，而底层的表示接近于目标机器。
语法树是高层的表示，它刻画了源程序的自然地层次性结构，并且适用于静态类型检查这样的处理。低层的表示形式适用于机器相关的处理任务，比如寄存器分配、指令选择
等。通过选择不同的运算符，三地址代码既可以是高层的表示方式，也可以是低层的表示方式。
    
                                    源程序 -> 高层中间表示 -> ... -> 低层中间表示 -> 目标代码


6.1 语法树的变体：


6.2 三地址代码：
  因为三地址代码拆分了多运算符算术表达式以及控制流语句的嵌套结构，所以适用于目标代码的生成和优化。因为可以用名字来表示程序计算得到的中间结果，所以三地址
代码可以方便地进行重组。
  
