2.1 引言
  编译器的工作可以分为两个阶段，分析阶段和合成阶段。编译器在分析阶段将一个源程序划分成各个组成部分，并生成源程序的内部表示形式。这种内部表示形式称为
中间代码。编译器在合成阶段将这个中间代码翻译成目标程序。

语法：描述一个语言的程序的正确形式。
语义：定义程序的含义，即每个程序在运行时做什么事情。

词法分析器使得翻译器可以处理由多个字符组成的构造，比如标识符。标识符由多个字符组成，但在语法分析阶段被当作一个单元进行处理。这样的单元就叫做词法单元。
两种中间代码的形式：
（1）抽象语法树（语法树）：表示了源程序的层次化语法结构。
（2）“三地址”指令序列。


2.2 语法定义
一种用于描述程序设计语言语法的表示方法——“上下文无关文法”。文法自然而然地描述了大多数程序设计语言构造的层次化语法结构。

比如java中的if-else语句,可以表示成这种形式：stmt -> if (expr) stmt else stmt. 其中，expr表示表达式，stmt表示语句。
其中的箭头可以读作“可以具有如下形式”。这样的规则成为产生式。在一个产生式中，像关键字if和括号这样的词法元素成为“终结符号”。像expr和stmt这样的变量
表示终结符号的序列，它们称为“非终结符号”。

一个上下文无关文法由四个元素组成：
（1）一个终结符号集合，他们有时也被称为“词法单元”。终结符号是该文法所定义的语言的基本符号的集合。
（2）一个非终结符号集合，他们有时也称为“语法变量”。每个非终结符号表示一个终结符号串的集合。
（3）一个产生式集合，每个产生式包括一个被称为产生式头或者左部的非终结符号，一个箭头，和一个产生式体或右部的由终结符号及非终结符号组成的序列。产生式主要
用来表示某个构造的某种书写形式。如果产生式头非终结符号代表一个构造，那么该产生式体就代表了该构造的一种书写方式。
（4）指定一个非终结符号为开始符号。

词法单元和终结符号：
  在编译器中，词法分析器读入源程序中的字符序列，将它们组织为具有词法含义的词素，生成并输出代表这些词素的词法单元序列。词法单元由两个部分组成：名字和属性。
词法单元的名字是语法分析器进行语法分析时候使用的抽象符号。我们常常把这些词法单元名字称为终结符号，因为他们在描述程序设计语言的文法中是以终结符号的形式
出现的。如果词法单元具有属性值，那么这个值就是一个指向符号表的指针，符号表中包含了该词法单元的附加信息。这些附加信息不是文法的组成部分，因此我们讨论文法
的时候，通常将词法单元和终结符号当做同义词。

如果某个非终结符号是某个产生式的头部，我们就说该产生式是该非终结符号的产生式。

语法分析的任务是：接受一个终结符号串作为输入，找出从文法的开始符号推导出这个串的方法。如果不能从文法的开始符号推导得到该终结符号串，则报告该终结符号串
中包含的语法错误。

一个文法的语言的另一个定义是指任何能够由某棵语法分析树生成的符号串的集合。为一个给定的终结符号串构建一棵语法分析树的过程称为对该符号串进行语法分析。

二义性：
一个文法可能又多棵语法分析树能够同时生成同一个给定的终结符号串。这样的文法称为具有二义性。
要证明一个文法具有二义性，只需要找到一个终结符号串，说明它是两棵以上语法分析树的结果。
因为具有两棵以上语法分析树的符号串通常具有多个含义，所以我们需要为编译应用设计出没有二义性的文法，或者在使用二义性文法时使用附加的规则来消除二义性。
