2.1 引言
  编译器的工作可以分为两个阶段，分析阶段和合成阶段。编译器在分析阶段将一个源程序划分成各个组成部分，并生成源程序的内部表示形式。这种内部表示形式称为
中间代码。编译器在合成阶段将这个中间代码翻译成目标程序。

语法：描述一个语言的程序的正确形式。
语义：定义程序的含义，即每个程序在运行时做什么事情。

词法分析器使得翻译器可以处理由多个字符组成的构造，比如标识符。标识符由多个字符组成，但在语法分析阶段被当作一个单元进行处理。这样的单元就叫做词法单元。
两种中间代码的形式：
（1）抽象语法树（语法树）：表示了源程序的层次化语法结构。
（2）“三地址”指令序列。


2.2 语法定义
一种用于描述程序设计语言语法的表示方法——“上下文无关文法”。文法自然而然地描述了大多数程序设计语言构造的层次化语法结构。

比如java中的if-else语句,可以表示成这种形式：stmt -> if (expr) stmt else stmt. 其中，expr表示表达式，stmt表示语句。
其中的箭头可以读作“可以具有如下形式”。这样的规则成为产生式。在一个产生式中，像关键字if和括号这样的词法元素成为“终结符号”。像expr和stmt这样的变量
表示终结符号的序列，它们称为“非终结符号”。

一个上下文无关文法由四个元素组成：
（1）一个终结符号集合，他们有时也被称为“词法单元”。终结符号是该文法所定义的语言的基本符号的集合。
（2）一个非终结符号集合，他们有时也称为“语法变量”。每个非终结符号表示一个终结符号串的集合。
（3）一个产生式集合，每个产生式包括一个被称为产生式头或者左部的非终结符号，一个箭头，和一个产生式体或右部的由终结符号及非终结符号组成的序列。产生式主要
用来表示某个构造的某种书写形式。如果产生式头非终结符号代表一个构造，那么该产生式体就代表了该构造的一种书写方式。
（4）指定一个非终结符号为开始符号。

词法单元和终结符号：
  在编译器中，词法分析器读入源程序中的字符序列，将它们组织为具有词法含义的词素，生成并输出代表这些词素的词法单元序列。词法单元由两个部分组成：名字和属性。
词法单元的名字是语法分析器进行语法分析时候使用的抽象符号。我们常常把这些词法单元名字称为终结符号，因为他们在描述程序设计语言的文法中是以终结符号的形式
出现的。如果词法单元具有属性值，那么这个值就是一个指向符号表的指针，符号表中包含了该词法单元的附加信息。这些附加信息不是文法的组成部分，因此我们讨论文法
的时候，通常将词法单元和终结符号当做同义词。

如果某个非终结符号是某个产生式的头部，我们就说该产生式是该非终结符号的产生式。

语法分析的任务是：接受一个终结符号串作为输入，找出从文法的开始符号推导出这个串的方法。如果不能从文法的开始符号推导得到该终结符号串，则报告该终结符号串
中包含的语法错误。

一个文法的语言的另一个定义是指任何能够由某棵语法分析树生成的符号串的集合。为一个给定的终结符号串构建一棵语法分析树的过程称为对该符号串进行语法分析。

二义性：
一个文法可能又多棵语法分析树能够同时生成同一个给定的终结符号串。这样的文法称为具有二义性。
要证明一个文法具有二义性，只需要找到一个终结符号串，说明它是两棵以上语法分析树的结果。
因为具有两棵以上语法分析树的符号串通常具有多个含义，所以我们需要为编译应用设计出没有二义性的文法，或者在使用二义性文法时使用附加的规则来消除二义性。


2.3 语法制导翻译：
  语法制导翻译是通过向一个文法的产生式附加一些规则或者程序片段而得到的。比如，考虑由以下产生式生成的表达式expr: expr -> expr1 + term. 这里，expr
是两个子表达式expr1和term的和。我们可以利用expr的结构，用如下的伪代码来翻译expr：
  翻译expr1;
  翻译term;
  处理+;
  
两个与语法制导翻译相关的概念：
（1）属性：属性表示与某个程序构造相关的任意的量。属性可以是多种多样的，比如表达式的数据类型、生成的代码中的指令数目或为某个构造生成的代码中第一条指令
的位置等都是属性的例子。因为我们用文法符号（终结符号或者非终结符号）来表示程序构造，所以我们将属性的概念从程序构造扩展到表示这些构造的文法符号上。
（2）翻译方案：翻译方案是一种将程序片段附加到一个文法的各个产生式上的表示法。当在语法分析过程中使用一个产生式时，相应的程序片段就会执行。这些程序片段
的执行效果按照语法分析过程的顺序组合起来，得到的结果就是这次分析/综合过程处理源程序得到的翻译结果。

一个表达式的后缀表示可以按照下面的方式进行归纳定义：
（1）如果E是一个变量或者常量，则E的后缀表示是E本身；
（2）如果E是一个形如E1 op E2的表达式，其中op是一个二目运算符，那么E的后缀表示是E1'E2'op，这里的E1'和E2'分别是E1和E2的后缀表示；
（3）如果E是一个形如(E1)的被括号括起来的表达式，则E的后缀表示就是E1的后缀表示。


2.4 语法分析
  语法分析是决定如何使用一个文法生成一个终结符号串的过程。在讨论这个问题时，可以想象正在构建一个语法分析树，这样可以帮助我们理解分析的过程。尽管在实践
中编译器并没有真的构造出这棵树。然而，原则上语法分析器必须能够构造出语法分析树，否则将无法保证翻译的正确性。

  对于任何上下文无关文法，我们都可以构造出一个时间复杂度为O(n^3)的语法分析器。它最多使用O(n^3)的时间就可以完成一个长度为n的符号串的语法分析。但是，
三次方的时间代价太昂贵了。幸运的是，对于实际的程序设计语言而言，我们通常能够设计出一个可以被高效分析的文法。线性时间复杂度的算法足以分析实践中出现的
各种程序设计语言。程序设计语言的语法分析器几乎总是一次性地从左向右扫描输入，每次向前看一个终结符号，并在扫描时构造出分析树的各个部分。
  
  大多数语法分析方法都可以归入一下两类：自顶向下方法和自底向上方法。这两个术语指的是语法分析树节点的构造顺序。在自顶向下语法分析器中，构造过程从根节点
开始，逐步向叶子结点方向进行；而在自底向上语法分析器中，构造过程从叶子结点开始，逐步构造出根节点。自顶向下语法分析器之所以受欢迎，是因为使用这种方法
可以较容易地手工构造出高效的语法分析器。不过自底向上分析方法可以处理更多种文法和翻译方案，所以直接从文法生成语法分析器的软件工具常常使用自底向上的方法。

预测分析法：
  递归下降分析文法是一种自顶向下的语法分析方法，它使用一组递归过程来处理输入。文法的每个非终结符都有一个相关联的过程。我们考虑递归下降分析法的一个简
单形式，称为预测分析法。在预测分析法中，各个非终结符号对应的过程中的控制流可以由向前看符号无二义性地确定。在分析输入串时出现的过程调用序列隐式地定义
了该输入串的一棵语法分析树。如果需要，还可以通过这些过程调用来构建一个显式的语法分析树。
  预测分析需要知道哪些符号可能成为一个产生式体所生成串的第一个符号。更精确的说，令a是一个文法符号（终结符号或非终结符号）串。我们将FIRST(a)定义为可以
由a生成的一个或多个终结符号串的第一个符号的集合。
