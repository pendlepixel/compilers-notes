词法分析

正则表达式 -> 指明词法单词
确定的有限自动机 -> 实现词法分析器
正则表达式 + 确定的有限自动机 --(通过数学化)--> 一个简单的、可读性更好的词法分析器

正则表达式：
二义性文法：如果文法G中的某个句子存在不只一棵语法树，则称该句子是二义性的。比如"if8"，应当将其看成一个标识符，还是两个单词的if和8？
消除二义性的规则：
(1)最长匹配（按照最长能组成的类型来匹配，上面就将其看成一个标识符，为“if8”）;
(2)规则优先（最先按照规则进行匹配，上面的，能最先匹配"if"，于是就认为"if"是一个单词，“8”是另一个单词）

确定的有限自动机（DFA）：不会有从同一状态出发的两条边标记为相同的符号
非确定的有限自动机（NFA）：一种需要对从一个状态出发的多条标有相同符号的边进行选择的自动机。

程序化： 正则表达式 -> NFA -> DFA -> 程序
优化的程序化流程：正则表达式 -> NFA -> DFA -> 最小化自动机 -> 程序

LEX：LEXical compiler的缩写，是Unix环境下非常著名的工具,主要功能是生成一个词法分析器(scanner)的C源码，描述规则采用正则表达式
