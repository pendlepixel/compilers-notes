1.1 语言处理器
编译器：一个程序，可以阅读以某一种语言（源语言）编写的程序，并把该程序翻译成一个等价的，用另一种语言（目标语言）编写的程序。
源程序 -> [编译器] -> 目标程序  
输入 -> [目标程序] -> 输出

解释器：直接利用用户提供的输入执行源程序中指定的操作
源程序+输入 -> [解释器] -> 输出

混合编译器：（以java语言为例）
源程序 -> [翻译器] -> 中间程序； 中间程序+输入 -> [虚拟机] -> 输出 

编译器的功能：将源程序映射成语义上等价的目标程序。
映射部分有两个部分组成：1、分析部分 2、综合部分。
编译器按功能分为前端和后端，前端是指分析部分，后端是指综合部分。


1.2 一个编译器的结构
一个编译器的各个步骤：
字符流 -> [词法分析器] -> 符号流 -> [语法分析] -> 语法树 -> [语义分析] -> 语法树 -> [中间代码生成器]
      -> 中间表示形式 -> [机器无关代码优化器] -> 中间表示形式 -> [代码生成器] -> 目标机器语言 -> [机器相关代码优化器] -> 目标机器语言

1.2.1 词法分析
  编译器的第一个步骤称为词法分析或扫描。词法分析器读入组成源程序的字符流，并且将他们组织成为有意义的词素的序列。对每个词素，词法分析器产生如下形式的
词法单元作为输出: <token-name, attribute-value>。这个词法单元被送给下一个步骤，即语法分析。在这个词法单元中，第一个分量token-name是一个由语法分析
步骤使用的抽象符号，第二个分量attribute-value指向符号表中关于这个词法单元的条目。符号表条目的信息会被语义分析和代码生成步骤使用。

1.2.2 语法分析
  编译器的第二个步骤称为语法分析或者解析。语法分析器使用由词法分析器生成的各个单元词法的第一个分量来创建树形的中间表示。该中间表示给出了词法分析产生
的词法单元流的语法结构。一个常用的表示方法是语法树，树中的每个内部结点表示一个运算，而该节点的子节点表示该运算的分量。

1.2.3 语义分析
  语义分析使用语法树和符号表中的信息来检查源程序是否和语言定义的语义一致。它同时也收集类型信息，并把这些信息存放在语法树或者符号表中，以便在随后的
中间代码生成过程中使用。

1.2.4 中间代码生成
  在把一个源程序翻译成目标代码的过程中，一个编译器可能构造出一个或多个中间表示。这些中间表示可以有多种形式。语法树是一种中间表示形式，他们通常在语法分析
和语义分析中使用。
  在源程序的语法分析和语义分析完成之后，很多编译器生成一个明确的低级的或类机器语言的中间表示。我们可以把这个表示看成是某个抽象机器的程序。该中间表示应该
具有两个重要的性质：它应该易于生成；且能够被轻松地翻译成目标及其上的语言。

1.2.5 代码优化
  机器无关的代码优化步骤试图改进中间代码，以便生成更好的目标代码。“更好”通常意味着更快，但是也可能会有其他目标，如更短的或能耗更低的目标代码。
  使用一个简单的中间代码生成算法，然后再进行代码优化步骤是生成优质代码的一个合理方法。
  
1.2.6 代码生成
  代码生成以源程序的一个中间表示形式为输入，并把它映射到目标语言。如果目标语言是机器代码，那么就必须为程序使用的每个变量选择寄存器或内存位置。然后，
中间指令被翻译成为能够完成相同任务的机器指令序列。代码生成的一个至关重要的方面是合理分配寄存器以存放变量的值。

1.2.7 符号表管理
  编译器的重要功能之一是使用源程序中使用的变量的名字，并收集和每个名字的各种属性有关的信息。这些属性可以提供一个名字的存储分配、它的类型、作用域（即
在程序的哪些地方可以使用这个名字的值）的信息。对于过程名字，这些信息还包括：它的参数数量和类型、每个参数的传递方法（比如传值或传引用）以及返回类型。
  符号表数据结构为每个变量名字也创建了一个记录条目。记录的字段就是每个名字的各个属性。这个数据结构应该允许编译器迅速查找每个名字的记录，比向记录中快
速存放和获取记录中的数据。

1.2.8 将多个步骤组合成趟
  前面关于步骤的讨论讲的是一个编译器的逻辑组织方式。在一个特定的实现中，多个步骤的活动可以被组合成一趟。每趟读入一个输入文件并产生一个输出文件。比如，
前端步骤中的词法分析、语法分析，以及中间代码生成可以被组合在一起成为一趟。代码优化可以作为一个可选的趟。然后可以有一个为特定目标机生成代码的后端趟。

1.2.9 编译器构造工具
一些常用的编译器构造工具包括：
（1）语法分析器的生成器：可以根据一个程序设计语言的语法描述自动生成语法分析器。
（2）扫描器的生成器：可以根据一个语言的语法单元的正则表达式描述生成词法分析器。
（3）语法制导的翻译引擎：可以生成一组用于遍历分析树并生成中间代码的例程。
（4）代码生成器的生成器：依据一组关于如何把中间语言的每个运算翻译成为目标机上的机器语言的规则，生成一个代码生成器。
（5）数据流分析引擎：可以帮助收集数据流信息，即程序中的值如何从程序中的一个部分传递到另一个部分。数据流分析是代码优化的一个重要部分。
（6）编译器构造工具集：提供了可用于构造编译器的不同阶段的例程的完整集合。

1.6 程序设计语言基础
1.6.1 静态和动态的区别
  如果一个语言使用的策略支持编译器静态决定某个问题，那么我们说这个语言使用了一个静态策略，或者说这个问题可以在编译时刻决定。另一方面，一个只允许在
运行程序的时候做出决定的策略被称为动态策略，或者认为需要在运行时刻做出决定。
  如果仅通过阅读程序就能确定一个声明的作用域，那么这个语言使用的是静态作用域，或者说词法作用域。否则，这个语言使用的是动态作用域。如果使用动态作用
域，当程序运行时，对同一个x的使用回指向x的几个声明中的某一个。

静态作用域和动态作用域的类比：虽然可以有各种各样的静态或者动态作用域策略，在通常的静态作用域规则和通常的动态策略之间有一个有趣的关系。从某种意义上说，
动态规则处理时间的方式类似于静态规则处理空间的方式。静态规则让我们寻找的声明位于最内层、包含变量使用位置的单元（块）中；而动态规则让我们寻找的声明
位于最内层、包含了变量使用时间的单元（过程调用）中。


第一章关键概念总结：
（1）语言处理器：一个集成的软件开发环境，其中包括很多种类的语言处理器，比如编译器、解释器、汇编器、连接器、加载器、调试器以及程序概要提取工具。
（2）编译器的步骤：一个编译器的运作需要一系列的步骤，每个步骤把源程序从一个中间表示转换成另一个中间表示。
（3）机器语言和汇编语言：机器语言是第一代程序设计语言，然后是汇编语言。使用这些语言进行编程既费时，又容易出错。
（4）编译器设计中的建模：编译器设计是理论对实践有很大影响的领域之一。已知在编译器设计中有用的模型包括自动机、文法、正则表达式、树型结构和很多其他
理论概念。
（5）代码优化：虽然代码不能达到真正最优化，但提高代码效率的科学既复杂又非常重要。他是编译技术研究的一个主要部分。
（6）高级语言：随着时间的流逝，程序设计语言担负了越来越多的原先由程序员负责的任务，比如内存管理、类型一致性检查或代码的并发执行。
（7）编译器和计算机体系结构：编译器技术影响了计算机的体系结构，同时也受到体系结构发展的影响。体系结构中的很多现代创新都依赖于编译器能够从源程序中抽取
出有效利用硬件能力的机会。
（8）软件生产率和软件安全性：使得编译器能够优化代码的技术同样能够用于多种不同的程序分析任务。这些任务既包括探测常见的程序错误，也包括发现程序可能会受
到已被黑客们发现的多种入侵方式之一的伤害。
（9）作用域规则：一个x的声明的作用域是一段上下文，在此上下文中对x的使用指向这个声明。如果仅仅通过阅读某个语言的程序就能确定其作用域，那么这个语言就
使用了静态作用域，或者说叫词法作用域。否则这个语言就使用了动态作用域。
（10）环境：名字和内存位置关联，然后再和值关联。这个情况可以使用环境和状态来描述。其中环境吧名字映射成为存储位置，而状态则把位置映射到他的值。
（11）块结构：允许语句块相互嵌套的语言称为块结构的语言。假设一个块中有一个x的声明D，而嵌套于这个块中的块B有一个对名字x的使用。如果在这两个块之间没有
其他声明了x的块，那么这个x的使用位于D的作用域内。
（12）参数传递：参数可以通过值或引用的方式从调用过程传递给被调用过程。当通过值传递方式传递大型对象时，实际被传递的值是指向这些对象本身的引用。这样就
变成了一个高效的引用调用。
（13）别名：当参数被以引用传递方式（高效地）传递时，两个形式参数可能会指向同一个对象。这会造成一个变量的修改改变了另一个变量的值。
